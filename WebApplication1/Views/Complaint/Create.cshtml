@model Complaint

@{
    ViewData["Title"] = "Yeni Şikayet Oluştur";
}

<div class="container py-5 complaint-form-section">
    <div class="card complaint-card-form shadow-lg border-0">
        <div class="card-header text-center">
            <h3><i class="fas fa-plus-circle me-2"></i> @ViewData["Title"]</h3>
        </div>
        <div class="card-body p-4">
            <form asp-action="Create" method="post" id="complaintForm">
                <div class="mb-3">
                    <label asp-for="Title" class="form-label">Başlık</label>
                    <input asp-for="Title" class="form-control" placeholder="Şikayetinizin kısa başlığı" required />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Description" class="form-label">Açıklama</label>
                    <textarea asp-for="Description" class="form-control" rows="5" placeholder="Şikayetinizin detaylı açıklaması" required></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <!-- Tahmin Butonu ve Gösterim -->
                <div class="mb-3">
                    <button type="button" id="btnPredictCategory" class="btn btn-info mb-3">Kategori Tahmin Et</button>

                    <label class="form-label">Tahmin Edilen Kategori(ler)</label>
                    <input type="text" id="predictedCategoryDisplay1" class="form-control mb-2" placeholder="1. kategori" readonly />
                    <input type="text" id="predictedCategoryDisplay2" class="form-control mb-2" placeholder="2. kategori" readonly />

                    <!-- Veritabanına kaydedilecek kategoriler -->
                    <input type="hidden" asp-for="Category" id="predictedCategoryInput" />
                    <input type="hidden" asp-for="Category2" id="predictedCategory2Input" />
                    <span asp-validation-for="Category" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Location" class="form-label">Konum (Opsiyonel)</label>
                    <input asp-for="Location" class="form-control" placeholder="Örn: Cadde Adı, Mahalle" />
                    <span asp-validation-for="Location" class="text-danger"></span>
                </div>

                <div class="d-grid gap-2 mt-4">
                    <button type="submit" id="submitBtn" class="btn btn-primary-filled btn-lg" disabled>
                        <span id="submitSpinner" class="spinner-border spinner-border-sm me-2 d-none" role="status" aria-hidden="true"></span>
                        Şikayeti Gönder
                    </button>
                    <a asp-controller="Complaint" asp-action="MyComplaints" class="btn btn-secondary-outline btn-lg">İptal ve Şikayetlerime Dön</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Kategori Tahmin Fonksiyonu
        document.getElementById("btnPredictCategory").addEventListener("click", async function () {
            const description = document.querySelector("[name='Description']").value.trim();
            if (!description) {
                alert("Lütfen önce açıklamayı doldurun.");
                return;
            }

            this.disabled = true;
            const originalText = this.textContent;
            this.textContent = "Tahmin ediliyor...";

            try {
                const response = await fetch('/api/category/predict', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ text: description })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || "Tahmin API'si hata döndürdü.");
                }

                const data = await response.json();
                const categories = data.labels || [];

                // Display alanlarını güncelle
                document.getElementById("predictedCategoryDisplay1").value = categories[0] || "Genel";
                document.getElementById("predictedCategoryDisplay2").value = categories[1] || "";

                // Veritabanına kaydedilecek kategoriler
                document.getElementById("predictedCategoryInput").value = categories[0] || "Genel";
                document.getElementById("predictedCategory2Input").value = categories[1] || "";

                document.getElementById("submitBtn").disabled = false;

            } catch (error) {
                console.error("Tahmin hatası:", error);
                alert("Kategori tahmininde hata: " + error.message);
            } finally {
                this.disabled = false;
                this.textContent = originalText;
            }
        });

        // AJAX Form Gönderimi
        document.getElementById("complaintForm").addEventListener("submit", async function(e) {
            e.preventDefault();

            const submitBtn = document.getElementById("submitBtn");
            const spinner = document.getElementById("submitSpinner");
            submitBtn.disabled = true;
            spinner.classList.remove("d-none");

            try {
                const formData = new FormData(this);

                const response = await fetch('@Url.Action("Create", "Complaint")', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    // Başarılı kayıt sonrası yönlendirme
                    window.location.href = '@Url.Action("MyComplaints", "Complaint")';
                } else {
                    const errorData = await response.json();
                    let errorMessage = "Form gönderilirken hata oluştu";

                    if (errorData && errorData.errors) {
                        // ModelState hatalarını göster
                        errorMessage = Object.values(errorData.errors).flat().join("\n");
                    } else if (errorData && errorData.error) {
                        errorMessage = errorData.error;
                    }

                    alert(errorMessage);
                }
            } catch (error) {
                console.error("İstisna:", error);
                alert("Beklenmeyen hata: " + error.message);
            } finally {
                submitBtn.disabled = false;
                spinner.classList.add("d-none");
            }
        });

        // Form validasyon kontrolü
        document.querySelectorAll('input, textarea').forEach(element => {
            element.addEventListener('input', () => {
                if (document.getElementById("predictedCategoryInput").value) {
                    document.getElementById("submitBtn").disabled = false;
                }
            });
        });
    </script>
}